import drake
import os

from itertools import chain

boost = None
headers = None

def configure(static, cxx_toolkit, cxx_config, python3):

  global boost, headers

  windows = cxx_toolkit.os is drake.os.windows

  boost_static = static or cxx_toolkit.os in [drake.os.ios]
  boost_version = drake.Version(1, 60, 0)
  boost_basename = 'boost_%s' % str(boost_version).replace('.', '_')
  boost_tarball = drake.node('%s.tar.gz' % boost_basename)
  boost_host = \
    'https://storage.googleapis.com/sh_infinit_releases/boost'
  boost_url = '%s/%s.tar.gz' % (boost_host, boost_basename)
  drake.HTTPDownload(
    boost_url,
    boost_tarball,
    fingerprint = '28f58b9a33469388302110562bdf6188',
  )
  boost_patches = [
    (drake.Node('patches/boost_asio_ssl.patch'), 1),
    (drake.Node('patches/boost_crypt.patch'), 1),
    (drake.Node('patches/boost_datetime_facet.patch'), 1),
    (drake.Node('patches/boost_optional.patch'), 1),
    (drake.Node('patches/boost_warnings.patch'), 1),
    (drake.Node('patches/boost_asio_poll.patch'), 1),
  ]
  boost_locale_enabled = windows
  boost_attributes = {}
  exec(open(str(drake.path_source('files.py')), 'r').read(),
       boost_attributes)
  boost_patched_sources = boost_attributes['patched_sources']
  if cxx_toolkit.os is drake.os.macos:
    boost_patched_sources += [
      'boostcpp.jam', # boost_build_osx.patch
    ]
    boost_patches += [
      (drake.Node('.patches/boost_build_osx.patch'), 1),
    ]
  drake.TarballExtractor(
    boost_tarball,
    targets = ['%s/%s' % (boost_basename, f)
      for f in boost_patched_sources + ['bootstrap.sh']
    ],
    patches = boost_patches,
    patch_dir = boost_basename,
  )
  boost_bootstrap = drake.node('%s/bootstrap.sh' % boost_basename)
  boost_prefix = '%s' % boost_version
  boost_prefix_abs = drake.path_root() / drake.path_build(boost_prefix)
  boost_built_libraries = [
    'atomic',
    'chrono',
    'context',
    'date_time',
    'filesystem',
    'program_options',
    'regex',
    'signals',
    'system',
    ('test', 'unit_test_framework'),
    ('thread', 'thread_win32' if windows else 'thread'),
    'timer',
  ]
  boost_bootstrap_libraries, boost_library_names = ([
    l[i] if isinstance(l, tuple) else l
    for l in boost_built_libraries]
    for i in (0, 1))
  if python3 is not None and not windows:
    boost_bootstrap_libraries.append('python')
  if boost_locale_enabled:
    boost_bootstrap_libraries.append('locale')
  boost_bootstrap_command = [
    './bootstrap.sh',
    '--prefix=%s' % boost_prefix_abs,
    '--with-libraries=%s' % ','.join(boost_bootstrap_libraries),
    '--without-icu',
  ]
  if python3 is not None and not windows:
    boost_bootstrap_command.append(
      '--with-python=%s' % python3.version)
  boost_bjam = drake.node('%s/b2' % boost_basename)
  if python3 is not None and not windows:
    boost_library_names.append('python')
    boost_library_names.append('python3')
  if boost_locale_enabled:
    boost_library_names.append('locale')
  if cxx_toolkit.os is drake.os.macos:
    boost_static_format = '%s/lib/libboost_%s.a'
    boost_dynamic_format = '%s/lib/libboost_%s.dylib'
    boost_dynamic_versioned_format = \
      '%%s/lib/libboost_%%s-%s_%s.dylib' % \
      (boost_version.major, boost_version.minor)
  elif windows:
    if boost_static:
      boost_static_format = '%s/lib/libboost_%s-mt-s.a'
      boost_dynamic_format = None
      boost_dynamic_versioned_format = None
    else:
      boost_static_format = '%s/lib/libboost_%s-mt.dll.a'
      boost_dynamic_format = '%s/lib/libboost_%s-mt.dll'
      boost_dynamic_versioned_format = None
  elif cxx_toolkit.os is drake.os.ios:
    boost_static_format = '%s/lib/libboost_%s-mt-s.a'
    boost_dynamic_format = None
    boost_dynamic_versioned_format = None
  else:
    boost_static_format = '%s/lib/libboost_%s.a'
    boost_dynamic_format = '%s/lib/libboost_%s.so'
    boost_dynamic_versioned_format = \
      '%%s/lib/libboost_%%s.so.%s' % boost_version
  if boost_static:
    boost_fmt = ((drake.cxx.StaticLib, boost_static_format),)
  else:
    boost_fmt = ((drake.cxx.DynLib, boost_dynamic_format),
         (drake.cxx.DynLib, boost_dynamic_versioned_format))
  boost_libraries = (
    [t(fmt % (boost_prefix, name))
     for t, fmt in boost_fmt
     if fmt is not None]
    for name in boost_library_names)
  boost_libraries = list(chain(*boost_libraries))

  class BoostUserConfigGenerator(drake.Builder):

    def __init__(self, destination, cxx_toolkit):
      self.__toolkit = cxx_toolkit
      self.__user_config = destination
      # Depend on boost_bootstrap because the configuration is in
      # the tarball extraction path and would be erased if
      # extraction occurs after.
      super().__init__([boost_bootstrap], [self.__user_config])

    def execute(self):
      self.output('Generate %s' % self.__user_config,
                  'Generate Boost user configuration')
      with open(str(self.__user_config.path()), 'w') as f:
        params = self.params
        params['linkflags'] = ' '.join(
          '<linkflags>%s' % f for f in params['linkflags'])
        print(self.format % params, file = f)
      return True

    @property
    def user_config(self):
      return self.__user_config

    @property
    def format(self):
      res = '''\
using %(compiler)s : : %(cxx)s : %(linkflags)s ;
'''
      if python3 is not None:
        res += '''\
using python : %(python_version)s : %(python_prefix)s/%(python_bin)s : %(python_prefix)s/%(python_include)s : %(python_prefix)s/lib %(extra)s;
'''
      return res

    @property
    def params(self):
      cxx = self.__toolkit.cxx
      linkflags = []
      if windows:
        extra = ': <target-os>windows '
        linkflags = ['-static-libgcc', '-Wl,-Bstatic', '-lstdc++', '-lpthread', '-Wl,-Bdynamic']
      elif cxx_toolkit.os is drake.os.ios:
        boost_arch_str = ''
        for arch in archs:
          boost_arch_str += '-arch %s ' % arch
        cxx = '%s %s -fvisibility=hidden -fvisibility-inlines-hidden' % (cxx, boost_arch_str)
        cxx += '\n: <striper> <root>%s' % os.environ['CROSS_TOP']
        cxx += '\n: <architecture>arm <target-os>iphone'
        extra = ''
      else:
        extra = ''
      if cxx_toolkit.os is drake.os.macos:
        if cxx_toolkit.kind == drake.cxx.GccToolkit.Kind.clang:
          compiler = 'clang'
        else:
          compiler = 'darwin'
          cxx = cxx_toolkit.cxx
      elif cxx_toolkit.os is drake.os.ios:
        compiler = 'darwin'
      else:
        compiler = 'gcc'
      res = {
        'compiler': compiler,
        'cxx': cxx,
        'extra': extra,
        'linkflags': linkflags,
      }
      if python3 is not None:
        res.update({
          'python_bin': python3.python_interpreter,
          'python_include': python3.include_dir,
          'python_prefix': python3.prefix,
          'python_version': python3.version,
        })
      return res

    def hash(self):
      return self.format, self.params, self.__toolkit.cxx

  boost_user_config = BoostUserConfigGenerator(
    drake.node('%s/user-config.jam' % boost_basename),
    cxx_toolkit).user_config

  drake.ShellCommand(
    sources = [boost_bootstrap, boost_user_config],
    targets = [boost_bjam],
    command = boost_bootstrap_command,
    pretty = 'Bootstrap boost',
    cwd = drake.path_build(boost_basename))

  class BoostBuilder(drake.Builder):

    def __init__(self, sources, targets):
      self.__targets = targets
      self.__cwd = drake.path_build(boost_basename)
      super().__init__(srcs = sources, dsts = targets)
      if cxx_toolkit.os is drake.os.macos:
        if cxx_toolkit.kind == drake.cxx.GccToolkit.Kind.clang:
          toolset = 'clang'
        else:
          toolset = 'darwin'
      elif cxx_toolkit.os is drake.os.ios:
        toolset = 'darwin'
      elif windows:
        toolset = 'gcc-mingw'
      else:
        toolset = 'gcc'
      self.__command = [
        './b2', '-q', 'install', '--ignore-site-config',
        'toolset=%s' % toolset,
        '--disable-icu',
        '--user-config=user-config.jam',
      ]
      for opt in ['link', 'runtime-link']:
        self.__command.append('{}={}'.format(opt, 'static' if boost_static else 'shared'))
      if windows:
        self.__command += [
          'target-os=windows',
          'threading=multi,single',
          'threadapi=win32',
          'abi=ms',
          'binary-format=pe',
          '--layout=tagged',
          '--prefix=%s' % boost_prefix_abs,
          '-sBUILD=<define>BOOST_USE_WINDOWS_H=1',
          'cxxflags=-std=c++11 -include cmath -DBOOST_USE_WINDOWS_H -DBOOST_LEXICAL_CAST_ASSUME_C_LOCALE',
          'linkflags=-std=c++11',
        ]
      elif cxx_toolkit.os is drake.os.macos and \
          cxx_toolkit.kind == drake.cxx.GccToolkit.Kind.clang:
        self.__command += [
          'cxxflags=-stdlib=libc++ -std=c++11 -mmacosx-version-min={}'
          .format(MACOSX_DEPLOYMENT_TARGET),
          'linkflags=-stdlib=libc++ -std=c++11',
          '--layout=infinit_osx',
        ]
      elif cxx_toolkit.os is drake.os.ios:
        self.__command += [
          'cxxflags=-stdlib=libc++ -std=c++11',
          'linkflags=-stdlib=libc++ -std=c++11',
          'toolset=darwin',
          '--layout=tagged',
          '--prefix=%s' % boost_prefix_abs,
          'target-os=iphone',
          'architecture=arm',
          'define=_LITTLE_ENDIAN',
          'macosx-version=iphone-8.0',
          'abi=aapcs',
        ]
      elif cxx_toolkit.os is drake.os.android or cxx_toolkit.architecture == drake.architecture.arm:
        self.__command += [
          'cxxflags=-std=c++11',
          'linkflags=-std=c++11',
          'abi=aapcs',
        ]
      else:
        self.__command += [
          'cxxflags=-std=c++11',
          'linkflags=-std=c++11',
        ]

    def execute(self):
      # FIXME: Code duplication with PatchAndInstall.
      with drake.CWDPrinter(
          drake.path_build('.', absolute = True) / self.__cwd):
        if not self.cmd('Build Boost',
                        self.__command,
                        self.__cwd):
          return False
      if cxx_toolkit.os is drake.os.macos:
        for target in self.__targets:
          if isinstance(target, drake.cxx.DynLib):
            cmd = ['install_name_tool',
                   '-id', '@rpath/%s' % target.name().basename(),
                    str(target.path())]
            if not self.cmd('Fix id of %s' % target.path(), cmd):
              return False
            if cxx_toolkit.kind is drake.cxx.GccToolkit.Kind.clang:
              # Use our libc++.
              cmd = ['install_name_tool',
                     '-change', '/usr/lib/libc++.1.dylib',
                     '@rpath/libc++.1.dylib',
                     str(target)]
              if not self.cmd('Use our libc++ for %s' % target, cmd):
                return False
            for dep in (t for t in self.__targets if isinstance(t, drake.cxx.DynLib)):
              cmd = [
                'install_name_tool',
                '-change',
                '%s' % dep.name().basename(),
                '@rpath/%s' % dep.name().basename(),
                str(target.path()),
              ]
              if not self.cmd('Fix %s path for %s' % (target, dep), cmd):
                return False
      return True

    def hash(self):
      return self.__command
  boost_patched_sources = [
    drake.node('%s/%s' % (boost_basename, f))
      for f in boost_attributes['patched_sources']
  ]
  headers = [
    drake.node('%s/%s' % (boost_version, n))
      for n in boost_attributes['headers']
  ]
  BoostBuilder(
    sources = [boost_bjam, boost_user_config] + boost_patched_sources,
    targets = boost_libraries + headers)
  if windows and python3:
    python_version_tuple = \
      (python3.prefix, python_version.major, python_version.minor)
    python_dll = drake.node('%s/python%s%s.dll' % python_version_tuple)
    boost_fs = drake.node('lib/libboost_python3-mt-s.a')
    boost_fs.dependency_add(python_dll)
  boost = drake.cxx.boost.Boost(
    cxx_toolkit = cxx_toolkit,
    prefix = boost_prefix,
    version_effective = boost_version,
    prefer_shared = not boost_static,
  )
  build_rule = drake.Rule('build')
  build_rule << headers
  build_rule << boost_libraries
